schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """refresh the cache entry"""
  refresh: Boolean! = false

  """measured in seconds"""
  ttl: Int! = 60
) on QUERY

"""ordering argument of a cursor"""
enum CursorOrdering {
  """ascending ordering of the cursor"""
  ASC

  """descending ordering of the cursor"""
  DESC
}

"""column ordering options"""
enum OrderBy {
  """in ascending order, nulls last"""
  ASC

  """in ascending order, nulls first"""
  ASC_NULLS_FIRST

  """in ascending order, nulls last"""
  ASC_NULLS_LAST

  """in descending order, nulls first"""
  DESC

  """in descending order, nulls first"""
  DESC_NULLS_FIRST

  """in descending order, nulls last"""
  DESC_NULLS_LAST
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input StringComparisonExp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _isNull: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input TimestamptzComparisonExp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _isNull: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}

"""
columns and relationships of "users"
"""
type Users {
  createdAt: timestamptz!
  email: String!
  firstName: String!
  id: uuid!
  lastName: String!
  updatedAt: timestamptz!
}

"""
aggregated selection of "users"
"""
type UsersAggregate {
  aggregate: UsersAggregateFields
  nodes: [Users!]!
}

"""
aggregate fields of "users"
"""
type UsersAggregateFields {
  count(columns: [UsersSelectColumn!], distinct: Boolean): Int!
  max: UsersMaxFields
  min: UsersMinFields
}

"""
Boolean expression to filter rows from the table "users". All fields are combined with a logical 'AND'.
"""
input UsersBoolExp {
  _and: [UsersBoolExp!]
  _not: UsersBoolExp
  _or: [UsersBoolExp!]
  createdAt: TimestamptzComparisonExp
  email: StringComparisonExp
  firstName: StringComparisonExp
  id: UuidComparisonExp
  lastName: StringComparisonExp
  updatedAt: TimestamptzComparisonExp
}

"""
unique or primary key constraints on table "users"
"""
enum UsersConstraint {
  """
  unique or primary key constraint on columns "email"
  """
  users_email_key

  """
  unique or primary key constraint on columns "id"
  """
  users_pkey
}

"""
input type for inserting data into table "users"
"""
input UsersInsertInput {
  createdAt: timestamptz
  email: String
  firstName: String
  id: uuid
  lastName: String
  updatedAt: timestamptz
}

"""aggregate max on columns"""
type UsersMaxFields {
  createdAt: timestamptz
  email: String
  firstName: String
  id: uuid
  lastName: String
  updatedAt: timestamptz
}

"""aggregate min on columns"""
type UsersMinFields {
  createdAt: timestamptz
  email: String
  firstName: String
  id: uuid
  lastName: String
  updatedAt: timestamptz
}

"""
response of any mutation on the table "users"
"""
type UsersMutationResponse {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [Users!]!
}

"""
on_conflict condition type for table "users"
"""
input UsersOnConflict {
  constraint: UsersConstraint!
  update_columns: [UsersUpdateColumn!]! = []
  where: UsersBoolExp
}

"""Ordering options when selecting data from "users"."""
input UsersOrderBy {
  createdAt: OrderBy
  email: OrderBy
  firstName: OrderBy
  id: OrderBy
  lastName: OrderBy
  updatedAt: OrderBy
}

"""primary key columns input for table: users"""
input UsersPkColumnsInput {
  id: uuid!
}

"""
select columns of table "users"
"""
enum UsersSelectColumn {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstName

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  updatedAt
}

"""
input type for updating data in table "users"
"""
input UsersSetInput {
  createdAt: timestamptz
  email: String
  firstName: String
  id: uuid
  lastName: String
  updatedAt: timestamptz
}

"""
update columns of table "users"
"""
enum UsersUpdateColumn {
  """column name"""
  createdAt

  """column name"""
  email

  """column name"""
  firstName

  """column name"""
  id

  """column name"""
  lastName

  """column name"""
  updatedAt
}

input UsersUpdates {
  """sets the columns of the filtered rows to the given values"""
  _set: UsersSetInput
  where: UsersBoolExp!
}

"""
Boolean expression to compare columns of type "uuid". All fields are combined with logical 'AND'.
"""
input UuidComparisonExp {
  _eq: uuid
  _gt: uuid
  _gte: uuid
  _in: [uuid!]
  _isNull: Boolean
  _lt: uuid
  _lte: uuid
  _neq: uuid
  _nin: [uuid!]
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "users"
  """
  deleteUsers(
    """filter the rows which have to be deleted"""
    where: UsersBoolExp!
  ): UsersMutationResponse

  """
  delete single row from the table: "users"
  """
  deleteUsersByPk(id: uuid!): Users

  """
  insert data into the table: "users"
  """
  insertUsers(
    """the rows to be inserted"""
    objects: [UsersInsertInput!]!

    """upsert condition"""
    onConflict: UsersOnConflict
  ): UsersMutationResponse

  """
  insert a single row into the table: "users"
  """
  insertUsersOne(
    """the row to be inserted"""
    object: UsersInsertInput!

    """upsert condition"""
    onConflict: UsersOnConflict
  ): Users

  """
  update data of the table: "users"
  """
  updateUsers(
    """sets the columns of the filtered rows to the given values"""
    _set: UsersSetInput

    """filter the rows which have to be updated"""
    where: UsersBoolExp!
  ): UsersMutationResponse

  """
  update single row of the table: "users"
  """
  updateUsersByPk(
    """sets the columns of the filtered rows to the given values"""
    _set: UsersSetInput
    pk_columns: UsersPkColumnsInput!
  ): Users

  """
  update multiples rows of table: "users"
  """
  updateUsersMany(
    """updates to execute, in order"""
    updates: [UsersUpdates!]!
  ): [UsersMutationResponse]
}

type query_root {
  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinctOn: [UsersSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UsersOrderBy!]

    """filter the rows returned"""
    where: UsersBoolExp
  ): [Users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinctOn: [UsersSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UsersOrderBy!]

    """filter the rows returned"""
    where: UsersBoolExp
  ): UsersAggregate!

  """fetch data from the table: "users" using primary key columns"""
  usersByPk(id: uuid!): Users
}

type subscription_root {
  """
  fetch data from the table: "users"
  """
  users(
    """distinct select on columns"""
    distinctOn: [UsersSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UsersOrderBy!]

    """filter the rows returned"""
    where: UsersBoolExp
  ): [Users!]!

  """
  fetch aggregated fields from the table: "users"
  """
  usersAggregate(
    """distinct select on columns"""
    distinctOn: [UsersSelectColumn!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    orderBy: [UsersOrderBy!]

    """filter the rows returned"""
    where: UsersBoolExp
  ): UsersAggregate!

  """fetch data from the table: "users" using primary key columns"""
  usersByPk(id: uuid!): Users

  """
  fetch data from the table in a streaming manner : "users"
  """
  usersStream(
    """maximum number of rows returned in a single batch"""
    batchSize: Int!

    """cursor to stream the results returned by the query"""
    cursor: [users_streamCursorInput]!

    """filter the rows returned"""
    where: UsersBoolExp
  ): [Users!]!
}

scalar timestamptz

"""
Streaming cursor of the table "users"
"""
input users_streamCursorInput {
  """Stream column input with initial value"""
  initialValue: users_streamCursorValueInput!

  """cursor ordering"""
  ordering: CursorOrdering
}

"""Initial value of the column from where the streaming should start"""
input users_streamCursorValueInput {
  createdAt: timestamptz
  email: String
  firstName: String
  id: uuid
  lastName: String
  updatedAt: timestamptz
}

scalar uuid